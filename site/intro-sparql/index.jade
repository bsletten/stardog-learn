extends ../views/tutorial
include ../views/mixins

block subtitle
  | Introduction to SPARQL

block version-date
  | 1 May 2015, v. 1.0

block content
  div.tutorial
    h2 Introduction
    p SPARQL is a self-referential acronym. It stands for the **SP**ARQL Protocol and RDF Query Language. It identifies both a standard query language and a protocol for sending the queries to servers that support it. These two standards make it possible to use portable queries against portable data.
    :markdown
      ### Load the Data
      Fetch the tutorial data set from [here](https://path/to/data). This is some RDF data about restaurants in Washington, DC. Because of the standards involved you can load the data into Stardog without having to know anything about its structure.
      ``` auto
      $ stardog-admin db create -n dcfoodie -t -D -u admin -p admin dcfoodie.ttl 
      Bulk loading data to new database dcfoodie.
      Loaded 800 triples to dcfoodie from 1 file(s) in 00:00:00.184 @ 4.3K triples/sec.
      Successfully created database 'dcfoodie'.
      ```
      ### Basic Querying
      Even though you don't know the structure of the data before loading it in, you will probably want to learn what subjects and predicates are used in it out so you know how to ask specific questions. One of the basic SPARQL query forms is called the `SELECT` form.
      ``` auto
      SELECT <variables>
      WHERE {
         <graph pattern>
      }
      ```
      This query form will give you a tabular result set of data in the graph. Each variable you select will show up as a column in the results. If the graph pattern expressed in the `WHERE` clause exists in the graph, it will generate rows for every instance of the pattern that is matched. If you have a specific question to ask of the data, you will use a mixture of variables, URIs and literals in the graph pattern.
      
      First, let's get a basic sense of what is in the data we imported. We want to ask a query that is completely unconstrained. The graph pattern indicates the three parts of an RDF triple that might occur in the graph: subject, predicate, object. Because we don't know what is there, we'll issue a query with only variables in the graph pattern. This will match any triple in the graph and we'll get back one row per triple.
      ``` auto
      SELECT ?s ?p ?o
      WHERE {
         ?s ?p ?o
      }
      ```
      
      When we execute that query, we see that we get all 800 triples:
      
      ``` auto
      $ stardog query dcfoodie 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }'
      +----------------------+--------------+-----------------------------+
      |          s           |      p       |          o                  |
      +----------------------+--------------+-----------------------------+
      | :hasChefDeCuisine    | rdf:type     | owl:ObjectProperty          |
      | :hasChefDeCuisine    | rdfs:label   | "Has Chef De Cuisine"       |
      | :hasChefDePartie     | rdf:type     | owl:ObjectProperty          |
      | :hasChefDePartie     | rdfs:label   | "Has Chef De Partie"        |
      | :hasPatissier        | rdf:type     | owl:ObjectProperty          |
      | :hasPatissier        | rdfs:label   | "Has Patissier"             |
      | :hasPlongeur         | rdf:type     | owl:ObjectProperty          |
      | :hasPlongeur         | rdfs:label   | "Has Plongeur"              |
      | :hasPotager          | rdf:type     | owl:ObjectProperty          |
      ...
      ```
      
      When you don't wish to be overwhelmed by results (or be rude to a server), you should use the `LIMIT` clause to minimize the query results.
      
      ``` auto
      SELECT ?s ?p ?o
      WHERE {
         ?s ?p ?o
      }
      LIMIT 50
      ```
      
      With a more reasonable amount of data we see, in fact, that this is a data set about food. While it does talk about individual restaurants, we also see that introduces a several new properties as well. Because there is no separation between metadata and data, there is no reason to separate "schema" information (e.g. the definition of properties) and instance data (e.g. the assertion of values for those properties for entities).
      
      RDFS and OWL classes are useful ways of expressing set membership for resources. It may be interesting to find out all of the classes that resources are in our data set. We'll use a shortcut for the `rdf:type` relationship to find out every named class, or rather, everything that is an instance of the `owl:Class` class. In general there probably won't be too many classes defined so we'll leave off the `LIMIT` clause so we'll see them all.
      
      ``` auto
      SELECT ?class 
      WHERE 
      { ?class a owl:Class }
      ```
      
      ``` auto
      $ stardog query dcfoodie 'SELECT ?class WHERE { ?class a owl:Class }'
      +--------------------+
      |       class        |
      +--------------------+
      | :African           |
      | :American          |
      | :Apprenti          |
      | :Person            |
      | :Asian             |
      | :Boucher           |
      | :Boulanger         |
      | :Patissier         |
      | :DemiChef          |
      | :ChefDeCuisine     |
      | :ChefDePartie      |
      | :Commis            |
      | :Communard         |
      | :Confiseur         |
      | :Continental       |
      | :Decorateur        |
      | :Entremetier       |
      | :Ethiopian         |
      | :French            |
      | :Friturier         |
      | :Rotisseur         |
      | :GarconDeCuisine   |
      ...
      +--------------------+
      Query returned 42 results in 00:00:00.457
      ```
      
      While the class names are fairly descriptive, it might be nice to select for the human-readable label associated with each class. We saw above that `rdfs:label` is used to describe the properties here, so there is a good chance it is used for classes as well. While we're add it, let's look at the class list in alphabetical order.
      
      ``` auto
      SELECT ?class ?label 
      WHERE 
      { 
        ?class a owl:Class ;
          rdfs:label ?label .
      }
      ORDER BY ?class
      ```
      
      This query is getting a little long to put on the command line so we'll put it in a file called `class-label.rq` and pass that into our query request.
      
      ``` auto
      $ stardog query dcfoodie class-label.rq 
      +--------------------+------------------------+
      |       class        |         label          |
      +--------------------+------------------------+
      | :Apprenti          | "Apprenti"             |
      | :Boucher           | "Boucher"              |
      | :Boulanger         | "Boulanger"            |
      | :ChefDeCuisine     | "Chef de Cuisine"      |
      | :ChefDePartie      | "Chef de Partie"       |
      | :Commis            | "Commis"               |
      | :Communard         | "Communard"            |
      | :Confiseur         | "Confiseur"            |
      | :Decorateur        | "Decorateur"           |
      | :DemiChef          | "Demi Chef"            |
      | :Entremetier       | "Entremetier"          |
      | :Friturier         | "Friturier"            |
      | :GarconDeCuisine   | "Garcon de Cuisine"    |
      | :GardeManger       | "Garde Manger"         |
      | :Glacier           | "Glacier"              |
      | :Grillardin        | "Grillardin"           |
      | :Legumier          | "Legumier"             |
      | :Marmiton          | "Marmiton"             |
      | :Patissier         | "Patissier"            |
      | :Person            | "Person"@en            |
      | :Person            | "Persona"@es           |
      | :Plongeur          | "Plongeur"             |
      | :Poissonieur       | "Poissonieur"          |
      | :Potager           | "Potager"              |
      | :Rotisseur         | "Rotisseur"            |
      | :Saucier           | "Saucier"              |
      | :SousChefDeCuisine | "Sous Chef de Cuisine" |
      | :Student           | "Student"              |
      | :Student           | "Estudiante"@es        |
      | :Tournant          | "Tournant"             |
      +--------------------+------------------------+
      Query returned 30 results in 00:00:00.235
      ```
      
      Interestingly we see that the labels don't necessarily elucidate the class names more than names themselves already do, but we have learned something more about the data. First, not every class has an rdfs:label. We see that by the fact that the first class-based query returned 42 results but this one only returned 30. The difference between the queries is the inclusion of the `rdfs:label` in the graph pattern. Because some classes don't have labels, they are excluded from the results. Given that our goal was to learn more about the classes, not filter the results, we should re-write our query to allow classes that don't have labels to still show up in the results. For that, we'll use the `OPTIONAL` clause.
      
      ``` auto
      SELECT ?class ?label 
      WHERE 
      { 
        ?class a owl:Class ;
          rdfs:label ?label .
      }
      ORDER BY ?class
      ```
      
      Now we see which ones don't have labels, but we also notice that there are more than 42 results. Some of the classes have two labels, one in English, one in Spanish.      
      
      ``` auto
      $ stardog query dcfoodie class-label-optional.rq 
      +--------------------+------------------------+
      |       class        |         label          |
      +--------------------+------------------------+
      | :African           |                        |
      | :American          |                        |
      | :Apprenti          | "Apprenti"             |
      | :Asian             |                        |
      | :Boucher           | "Boucher"              |
      | :Boulanger         | "Boulanger"            |
      | :ChefDeCuisine     | "Chef de Cuisine"      |
      | :ChefDePartie      | "Chef de Partie"       |
      | :Commis            | "Commis"               |
      | :Communard         | "Communard"            |
      | :Confiseur         | "Confiseur"            |
      | :Continental       |                        |
      | :Decorateur        | "Decorateur"           |
      | :DemiChef          | "Demi Chef"            |
      | :Entremetier       | "Entremetier"          |
      | :Ethiopian         |                        |
      | :French            |                        |
      | :Friturier         | "Friturier"            |
      | :GarconDeCuisine   | "Garcon de Cuisine"    |
      | :GardeManger       | "Garde Manger"         |
      | :Glacier           | "Glacier"              |
      | :Greek             |                        |
      | :Grillardin        | "Grillardin"           |
      | :Indian            |                        |
      | :Italian           |                        |
      | :Japanese          |                        |
      | :Latin             |                        |
      | :Legumier          | "Legumier"             |
      | :Marmiton          | "Marmiton"             |
      | :Mexican           |                        |
      | :Patissier         | "Patissier"            |
      | :Person            | "Person"@en            |
      | :Person            | "Persona"@es           |
      | :Plongeur          | "Plongeur"             |
      | :Poissonieur       | "Poissonieur"          |
      | :Potager           | "Potager"              |
      | :Rotisseur         | "Rotisseur"            |
      | :Salvadoran        |                        |
      | :Saucier           | "Saucier"              |
      | :SousChefDeCuisine | "Sous Chef de Cuisine" |
      | :Student           | "Student"              |
      | :Student           | "Estudiante"@es        |
      | :Thai              |                        |
      | :Tournant          | "Tournant"             |
      +--------------------+------------------------+

      Query returned 44 results in 00:00:00.337
      ```
      
      To find all of the Spanish labels, we can filter the results by language. As we know there are labels, we'll avoid the use of `OPTIONAL` here.
      
      ``` auto
      SELECT ?class ?label 
      WHERE 
      { 
        ?class a owl:Class ;
          rdfs:label ?label .
        FILTER( lang(?label) = 'es' )
      }
      ORDER BY ?class
      ```
      
      We see the results below.
      
      ``` auto
      $ stardog query dcfoodie class-label-es.rq 
      +----------+-----------------+
      |  class   |      label      |
      +----------+-----------------+
      | :Person  | "Persona"@es    |
      | :Student | "Estudiante"@es |
      +----------+-----------------+

      Query returned 2 results in 00:00:00.405
      ```
      
      What if we considered it a failure that some of the classes don't have labels? We want the vocabulary to be self-documenting. We can use the `bound()` function along with the `FILTER` clause to show us only the classes that don't have labels.
 
      ``` auto
      SELECT ?class
      WHERE 
      { 
        ?class a owl:Class ;
          rdfs:label ?label .
        FILTER( !bound(?label) )
      }
      ORDER BY ?class
      ```
      
      Uh-oh! Perhaps surprisingly we get no results when we run our query:
      
      ``` auto
      $ stardog query dcfoodie class-no-label.rq 
      +-------+
      | class |
      +-------+
      +-------+

      Query returned 0 results in 00:00:00.499
      ```
      
      A quick think about our graph pattern will show us what is wrong. We're still matching against graphs with both class names and labels. We need to use the `OPTIONAL` clause to allow classes without labels to be matched and then we will filter on the results.
      
      ``` auto
      SELECT ?class
      WHERE 
      { 
        ?class a owl:Class .
        OPTIONAL { ?class rdfs:label ?label } .
        FILTER( !bound(?label) )
      }
      ORDER BY ?class
      ```
      Now we get what we were expecting, the name of each class that doesn't have a label.
      
      ``` auto
      $ stardog query dcfoodie class-no-label-optional.rq 
      +--------------+
      |    class     |
      +--------------+
      | :African     |
      | :American    |
      | :Asian       |
      | :Continental |
      | :Ethiopian   |
      | :French      |
      | :Greek       |
      | :Indian      |
      | :Italian     |
      | :Japanese    |
      | :Latin       |
      | :Mexican     |
      | :Salvadoran  |
      | :Thai        |
      +--------------+

      Query returned 14 results in 00:00:00.172
      ```
      
      Finally, if we just want to check periodically whether there are any new, unlabelled classes in our vocabulary, we can count the results using the `COUNT` aggregate function. Obviously if we aren't going to be looking at the class names, we can leave off the `ORDER BY` clause.
      
      ``` auto
      SELECT (COUNT(?class) as ?missingLabelCount)
      WHERE 
      { 
        ?class a owl:Class .
        OPTIONAL { ?class rdfs:label ?label } .
        FILTER( !bound(?label) )
      }
      ```

      ``` auto
      $ stardog query dcfoodie class-missing-label-count.rq 
      +-------------------+
      | missingLabelCount |
      +-------------------+
      | 14                |
      +-------------------+

      Query returned 1 results in 00:00:00.356
      ```           
      ### A Note on Prefixes
      
      The astute reader will perhaps notice that there have been a marked lack of namespace prefixes in our queries so far. We have been taking advantage of a Stardog convenience. By default it knows about namespaces such as those associated with RDF, RDFS and OWL.
      
      To find out which prefixes are already known by the database (and can thus be omitted), you can run the following command:
      
      ``` auto
      $ stardog namespace list dcfoodie
      +---------+---------------------------------------------+
      | Prefix  |                  Namespace                  |
      +---------+---------------------------------------------+
      |         | http://org.clarkparsia.dcfoodie/model#      |
      | owl     | http://www.w3.org/2002/07/owl#              |
      | rdf     | http://www.w3.org/1999/02/22-rdf-syntax-ns# |
      | rdfs    | http://www.w3.org/2000/01/rdf-schema#       |
      | s1      | http://org.someorg/someDB#                  |
      | s2      | http://org.someorg/japaneseDC#              |
      | stardog | tag:stardog:api:                            |
      | swrl    | http://www.w3.org/2003/11/swrl#             |
      | swrlb   | http://www.w3.org/2003/11/swrlb#            |
      | xml     | http://www.w3.org/XML/1998/namespace        |
      | xsd     | http://www.w3.org/2001/XMLSchema#           |
      +---------+---------------------------------------------+
      ```
      
      To add a prefix that is not yet known, you can use the following command:
      
      ``` auto
      $ stardog namespace add dcfoodie --prefix void --uri 'http://rdfs.org/ns/void#'
      Successfully added the namespace.
      ```
      We have now added the namespace for the [Vocabulary of Interlinked Datasets (VoID)](http://www.w3.org/TR/void/) to our database. Re-running the namespace query shows that it is now available.
      ``` auto
      $ stardog namespace list dcfoodie
      +---------+---------------------------------------------+
      | Prefix  |                  Namespace                  |
      +---------+---------------------------------------------+
      |         | http://org.clarkparsia.dcfoodie/model#      |
      | owl     | http://www.w3.org/2002/07/owl#              |
      | rdf     | http://www.w3.org/1999/02/22-rdf-syntax-ns# |
      | rdfs    | http://www.w3.org/2000/01/rdf-schema#       |
      | s1      | http://org.someorg/someDB#                  |
      | s2      | http://org.someorg/japaneseDC#              |
      | stardog | tag:stardog:api:                            |
      | swrl    | http://www.w3.org/2003/11/swrl#             |
      | swrlb   | http://www.w3.org/2003/11/swrlb#            |
      | void    | http://rdfs.org/ns/void#                    |
      | xml     | http://www.w3.org/XML/1998/namespace        |
      | xsd     | http://www.w3.org/2001/XMLSchema#           |
      +---------+---------------------------------------------+
      ```
      
      ### Other Query Forms
      
      So far we have focused on the `SELECT` form of SPARQL queries. These generate tabular result sets. There are other forms available to use with different intents.
      
      If you would like to quickly determine if a data set in a database has information relevant to your current round of inquiry, you can try the `ASK` form which gives you a quick yes or no answer. As soon as it finds a solution to the query, it will return a positive result and not bother evaluating the rest of the results.
      
      Let's say you are in the mood for some French food. We're not really sure how the data represents cuisine, so we'll first find out what predicates there are in the database. We know there will probably be restaurants connected to cuisine values. So, let's ask what that relationship might be. We only want one copy of each relationship so we'll use the `DISTINCT` keyword and we'll order the results alphabetically.
      
      ``` auto
      SELECT DISTINCT ?cuisineRelationship 
      WHERE {
        ?restaurant ?cuisineRelationship "French" .
      }
      ORDER BY ?cuisineRelationship
      ```
      
      We run the query and see the result:
      
      ``` auto
      $ stardog query dcfoodie cuisine-predicate.rq 
      +---------------------+
      | cuisineRelationship |
      +---------------------+
      | :cuisine            |
      | swrl:argument2      |
      +---------------------+

      Query returned 2 results in 00:00:00.077
      ```

      We get two results. We don't yet know what that second one is, but it seems highly likely that `:cuisine` is the relationship we are going for so we'll use that. What we want to know is if there are any French restaurants in the database. We can use the `ASK` form to come up with a quick answer before we decide to dig deeper.
      
      ``` auto
      ASK
      WHERE {
        ?restaurant :cuisine "French" .
      }
      ```
      As you see below, we don't get back a tabular result, just a simple `true` or `false`. Great! There are some French restaurants in our database.
      
      ``` auto
      $ stardog qstardog query dcfoodie ask-french.rq 
      Result: true.
      ```
      
      By changing the the form to a `SELECT` form but keeping the graph pattern the same, we can now find out which restaurants have the kind of food we are looking for.
      
      ``` auto
      SELECT ?restaurant
      WHERE {
         ?restaurant :cuisine "French" .
      }
      ```
      
      We see that there are three.
      
      ``` auto
      +---------------------------------------+
      |              restaurant               |
      +---------------------------------------+
      | http://data.example.com/locations/012 |
      | http://data.example.com/locations/013 |
      | http://data.example.com/locations/014 |
      +---------------------------------------+

      Query returned 3 results in 00:00:00.084
      ```
      
      Ok, choice is good. Unfortunately, the URIs themselves really don't tell us much about the resource. We could construct a SPARQL to select for all of the data we know about any such resource, but we have a nice shortcut in the `DESCRIBE` form of SPARQL queries. A simple way of using it is to just pick one of the restaurants and ask Stardog to tell us about the resource.
      
      ``` auto
      $ stardog query -f turtle dcfoodie 'DESCRIBE <http://data.example.com/locations/013>'
      @prefix : <http://org.clarkparsia.dcfoodie/model#> .
      @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
      @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

      <http://data.example.com/locations/013> a :Restaurant ;
      	rdfs:label "Le Diplomate" ;
      	:hasWebsite <http://lediplomatedc.com/> ;
      	:city "Washington" ;
      	:cuisine "French" ;
      	:phone "202.332.3333" ;
      	:restaurantName "Le Diplomate" ;
      	:state "DC" ;
      	:streetAddress "1601 14th st NW" ;
      	:zipcode "20009"^^xsd:integer .
      ```
      This is useful. Now we can use a modified form of `DESCRIBE` which doesn't tell us about a single resource, but about any that match a graph pattern like we have been using for the `SELECT` and `ASK` queries.
      
      ``` auto
      DESCRIBE ?restaurant
      WHERE {
         ?restaurant :cuisine "French" .
      }
      ```
      
      This yields:
      
      ``` auto
      $ stardog query -f turtle dcfoodie describe-french-cuisine.rq
        
      <http://data.example.com/locations/012> a :Restaurant ;
      	rdfs:label "Table DC" ;
      	:hasWebsite <http://tabledc.com/> ;
      	:city "Washington" ;
      	:cuisine "French" ;
      	:phone "202.588.5200" ;
      	:restaurantName "Table DC" ;
      	:state "DC" ;
      	:streetAddress "903 N st NW" ;
      	:zipcode "20001"^^xsd:integer .
        .
        .
        .
        .
        .
      ```
      
      This is a very powerful command, but unfortunately it produces too much data. We're actually feeling pretty tired so we don't want to travel. Let's reduce the output to only French restaurants in our ZIP code of "20001". We see there is at least one.
      
      ``` auto
      DESCRIBE ?restaurant
      WHERE {
         ?restaurant :cuisine "French" ;
            :zipcode "20001" .
      }
      ```
      
      Unfortunately, we are in for a rude awakening when we run this query.
      
      ``` auto
      $ stardog query -f turtle dcfoodie describe-french-cuisine2.rq

      @prefix : <http://org.clarkparsia.dcfoodie/model#> .
      @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
      @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
      ```
      
      Wait, what? Where did our restaurant go?
      
      We have just stumbled across one of the biggest problems for people new to SPARQL and RDF. Upon closer inspection of our previous result, we see that the value for the `:zipcode` predicate is a typed literal. It isn't a string, it is an integer. When we didn't specify a value for the ZIP code, the `DESCRIBE` results tell us what it found. When we tried to use a string instead of an integer, nothing matched. This isn't an intuitive result to many folks and proves to be rather frustrating. Fortunately, it's an easy fix. We just simply add the type to our literal in our query.
      
      ``` auto
      DESCRIBE ?restaurant
      WHERE {
         ?restaurant :cuisine "French" ;
            :zipcode "20001"^^xsd:integer .
      }
      ```
      
      Now we see that there is one and only one French restaurant in our ZIP code. Bon Appétit!
      
      ``` auto
      $ stardog query -f turtle dcfoodie describe-french-cuisine3.rq

      <http://data.example.com/locations/012> a :Restaurant ;
      	rdfs:label "Table DC" ;
      	:hasWebsite <http://tabledc.com/> ;
      	:city "Washington" ;
      	:cuisine "French" ;
      	:phone "202.588.5200" ;
      	:restaurantName "Table DC" ;
      	:state "DC" ;
      	:streetAddress "903 N st NW" ;
      	:zipcode "20001"^^xsd:integer .
      ```
      
      ### More Features
      
      Some other night we are hungry again but don't want to be stuck in a rut so we decide to explore what our database has to offer. Let's see how many restaurants we have per cuisine type. Because the graph results could come back in any order, we'll first want to group the restaurants by cuisine and then count the number per group. We can use the `GROUP BY` clause like this:
      
      ``` auto
      SELECT ?cuisine (COUNT(?cuisine) as ?cuisineCount)
      WHERE {
        ?restaurant :cuisine ?cuisine .
      }
      GROUP BY ?cuisine
      ```
      
      This query produces the following distribution:
      
      ``` auto
      $ stardog query dcfoodie group-by.rq 
      +-----------------+--------------+
      |     cuisine     | cuisineCount |
      +-----------------+--------------+
      | "Diner"         | 1            |
      | "Sandwich"      | 1            |
      | "Indian"        | 2            |
      | "Greek"         | 1            |
      | "American"      | 6            |
      | "Ethiopian"     | 1            |
      | "Thai"          | 1            |
      | "Italian"       | 2            |
      | "French"        | 3            |
      | "International" | 1            |
      | "Salvadoran"    | 1            |
      | "Japanese"      | 3            |
      | "Mexican"       | 3            |
      | "Brazilian"     | 1            |
      +-----------------+--------------+

      Query returned 14 results in 00:00:00.060
      ```
      
      Wow. That's a lot of choices. We're too hungry. Because we aren't really sure what we want, let's pick an arbitrary way of filtering the results. Let's find relevant details about restaurants who serve cuisine that starts with the letter 'i'. For this we will use the `FILTER` clause we saw before, but this time we'll match a [regular expression](http://en.wikipedia.org/wiki/Regular_expression) with the `regex` function. The '^' character means we want to match the beginning of the word and the second 'i' means we want to ignore case.
      
      ``` auto
      SELECT ?name ?cuisine ?phoneNumber
      WHERE {
         ?restaurant :cuisine ?cuisine ;
           :restaurantName ?name ;
           :phone ?phoneNumber .
     
         FILTER(regex(?cuisine, "^i", "i"))
      }
      ```
      
      Silly as it is, we see our results here:
      
      ``` auto
      $ stardog query dcfoodie filter-regex.rq 
      +-----------------------+-----------------+----------------+
      |         name          |     cuisine     |  phoneNumber   |
      +-----------------------+-----------------+----------------+
      | "Rasika Penn Quarter" | "Indian"        | "202-887-2919" |
      | "Rasika West End"     | "Indian"        | "202.466.1000" |
      | "Obelisk"             | "Italian"       | "202.001.0021" |
      | "Elisir"              | "Italian"       | "202.546.0088" |
      | "The Mini Bar"        | "International" | "202.393.0812" |
      +-----------------------+-----------------+----------------+

      Query returned 5 results in 00:00:00.068
      ```
      
      ### Updating the Database
      
      Stardog has always had several ways of modifying the data that it stores. SPARQL 1.1 added the ability to update through SPARQL itself. Let's say we noticed that there was a typo in the name of one of our restaurants. Notice the label and the name are both incorrect.
      
      ``` auto
      $ stardog query -f turtle dcfoodie 'DESCRIBE <http://data.example.com/locations/018>' 
      @prefix : <http://org.clarkparsia.dcfoodie/model#> .
      @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
      @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

      <http://data.example.com/locations/018> a :Restaurant ;
      	rdfs:label "Blacksait Restaurant" ;
      	:hasWebsite <http://www.blacksaltrestaurant.com/> ;
      	:city "Washington" ;
      	:cuisine "American" ;
      	:phone "202.342.9101" ;
      	:restaurantName "Blacksait Restaurant" ;
      	:state "DC" ;
      	:streetAddress "4883 MacArthur Blvd" ;
      	:zipcode "20007"^^xsd:integer .
      ```
      
      Let's fix this by inserting the right data into the database.
      
      ``` auto
      INSERT DATA
      { 
        <http://data.example.com/locations/018> 
           rdfs:label 'Blacksalt Restaurant' ;
           :restaurantName 'Blacksalt Restaurant' .
      }
      ```
      
      We execute our query and see that it runs successfully.
      
      ``` auto
      $ stardog query dcfoodie insert.rq 
      Update query processed successfully in 00:00:00.156.
      ```
      
      Now when we check, we see that we made a mistake. Inserting the above data didn't overwrite the previous values, it added two more triples.
      
      ``` auto
      $ stardog query -f turtle dcfoodie 'DESCRIBE <http://data.example.com/locations/018>' 
      @prefix : <http://org.clarkparsia.dcfoodie/model#> .
      @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
      @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

      <http://data.example.com/locations/018> a :Restaurant ;
      	rdfs:label "Blacksait Restaurant" , "Blacksalt Restaurant" ;
      	:hasWebsite <http://www.blacksaltrestaurant.com/> ;
      	:city "Washington" ;
      	:cuisine "American" ;
      	:phone "202.342.9101" ;
      	:restaurantName "Blacksait Restaurant" ;
      	:state "DC" ;
      	:streetAddress "4883 MacArthur Blvd" ;
      	:zipcode "20007"^^xsd:integer .
      ```
      
      We need to tell Stardog to remove the offending triples. This is easy enough to do with the following query using the `DELETE` keyword.
        
      ``` auto
      DELETE DATA
      { 
        <http://data.example.com/locations/018> 
           rdfs:label 'Blacksait Restaurant' ;
           :restaurantName 'Blacksait Restaurant' .
      }
      ```
      
      Run our clean up query and we see it succeeds.
      
      ``` auto
      $ stardog query dcfoodie delete.rq 
      Update query processed successfully in 00:00:00.051.
      ```
      And now, when we check, we have the right data stored.
      
      ``` auto
      $ stardog query -f turtle dcfoodie 'DESCRIBE <http://data.example.com/locations/018>' 
      @prefix : <http://org.clarkparsia.dcfoodie/model#> .
      @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
      @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

      <http://data.example.com/locations/018> a :Restaurant ;
      	rdfs:label "Blacksalt Restaurant" ;
      	:hasWebsite <http://www.blacksaltrestaurant.com/> ;
      	:city "Washington" ;
      	:cuisine "American" ;
      	:phone "202.342.9101" ;
      	:restaurantName "Blacksalt Restaurant" ;
      	:state "DC" ;
      	:streetAddress "4883 MacArthur Blvd" ;
      	:zipcode "20007"^^xsd:integer .
      ```
      
      There is plenty more to SPARQL than what we have covered, but we've gone through quite a bit of the different use cases. At this level, it has all been about matching what's explicitly expressed in the graph. This is powerful and useful, but it is only part of what Stardog has to offer. We'll need to learn some more before we can take advantage of these extra features though.